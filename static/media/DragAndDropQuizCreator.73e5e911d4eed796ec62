import React, { useState } from 'react';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import styled from 'styled-components';

const Container = styled.div`
  display: flex;
  justify-content: space-around;
  margin-top: 20px;
`;

const Box = styled.div`
  border: 1px solid #ccc;
  border-radius: 5px;
  padding: 10px;
  width: 200px;
  min-height: 200px;
`;

const Word = styled.div`
  margin: 5px;
  padding: 5px;
  border: 1px solid #000;
  border-radius: 3px;
  background-color: #f1f1f1;
  cursor: grab;
`;

const Form = styled.form`
  display: flex;
  flex-direction: column;
  margin-bottom: 20px;
`;

const Input = styled.input`
  padding: 5px;
  margin: 5px 0;
`;

const Button = styled.button`
  padding: 5px 10px;
  margin: 5px 0;
  background-color: #007bff;
  color: white;
  border: none;
  border-radius: 3px;
  cursor: pointer;

  &:hover {
    background-color: #0056b3;
  }
`;

const DragAndDropQuizCreator = () => {
  const [newWord, setNewWord] = useState('');
  const [newCategory, setNewCategory] = useState('');
  const [words, setWords] = useState([]);
  const [categories, setCategories] = useState(['명사', '동사', '형용사', '전치사']);

  const initialColumns = {
    words: {
      name: '단어들',
      items: words
    },
    ...categories.reduce((acc, category) => {
      acc[category] = { name: category, items: [] };
      return acc;
    }, {})
  };

  const [columns, setColumns] = useState(initialColumns);

  const addWord = () => {
    const newWords = [...words, { id: `word-${words.length + 1}`, content: newWord }];
    setWords(newWords);
    setColumns({
      ...columns,
      words: {
        ...columns.words,
        items: newWords
      }
    });
    setNewWord('');
  };

  const addCategory = () => {
    if (categories.includes(newCategory)) return;
    const newCategories = [...categories, newCategory];
    setCategories(newCategories);
    setColumns({
      ...columns,
      [newCategory]: { name: newCategory, items: [] }
    });
    setNewCategory('');
  };

  const onDragEnd = (result, columns, setColumns) => {
    if (!result.destination) return;
    const { source, destination } = result;

    if (source.droppableId !== destination.droppableId) {
      const sourceColumn = columns[source.droppableId];
      const destColumn = columns[destination.droppableId];
      const sourceItems = [...sourceColumn.items];
      const destItems = [...destColumn.items];
      const [removed] = sourceItems.splice(source.index, 1);
      destItems.splice(destination.index, 0, removed);
      setColumns({
        ...columns,
        [source.droppableId]: {
          ...sourceColumn,
          items: sourceItems
        },
        [destination.droppableId]: {
          ...destColumn,
          items: destItems
        }
      });
    } else {
      const column = columns[source.droppableId];
      const copiedItems = [...column.items];
      const [removed] = copiedItems.splice(source.index, 1);
      copiedItems.splice(destination.index, 0, removed);
      setColumns({
        ...columns,
        [source.droppableId]: {
          ...column,
          items: copiedItems
        }
      });
    }
  };

  return (
    <div>
      <h3>단어를 드래그해서 알맞은 분류 상자에 놓으세요</h3>
      <Form>
        <Input
          type="text"
          placeholder="단어 추가"
          value={newWord}
          onChange={(e) => setNewWord(e.target.value)}
        />
        <Button type="button" onClick={addWord}>단어 추가</Button>
        <Input
          type="text"
          placeholder="새로운 카테고리 추가"
          value={newCategory}
          onChange={(e) => setNewCategory(e.target.value)}
        />
        <Button type="button" onClick={addCategory}>카테고리 추가</Button>
      </Form>
      <DragDropContext onDragEnd={(result) => onDragEnd(result, columns, setColumns)}>
        <Container>
          {Object.entries(columns).map(([columnId, column], index) => (
            <Droppable key={columnId} droppableId={columnId}>
              {(provided, snapshot) => (
                <Box
                  ref={provided.innerRef}
                  {...provided.droppableProps}
                  style={{
                    background: snapshot.isDraggingOver ? 'lightblue' : 'lightgrey'
                  }}
                >
                  <h4>{column.name}</h4>
                  {column.items.map((item, index) => (
                    <Draggable key={item.id} draggableId={item.id} index={index}>
                      {(provided, snapshot) => (
                        <Word
                          ref={provided.innerRef}
                          {...provided.draggableProps}
                          {...provided.dragHandleProps}
                          style={{
                            ...provided.draggableProps.style,
                            backgroundColor: snapshot.isDragging ? '#263B4A' : '#456C86',
                            color: 'white'
                          }}
                        >
                          {item.content}
                        </Word>
                      )}
                    </Draggable>
                  ))}
                  {provided.placeholder}
                </Box>
              )}
            </Droppable>
          ))}
        </Container>
      </DragDropContext>
    </div>
  );
};

export default DragAndDropQuizCreator;
